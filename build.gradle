plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id "nu.studer.jooq" version "8.2.1"

}

group = 'org.serje3'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    jooqGenerator('org.postgresql:postgresql:42.3.1')
    jooqGenerator('org.jooq:jooq-meta-extensions-liquibase:3.16.4')
}

tasks.named('test') {
    useJUnitPlatform()
}

jooq {
    configurations {
        main {
            generationTool {
                generateSchemaSourceOnCompilation.set(false)
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/cocker'
                    user = 'postgres'
                    password = 'example'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = '.*'
                        excludes = 'database.*'
                        inputSchema = 'public'
                        // A flag to indicate that the outputSchema should be the "default" schema, which generates schema-less, unqualified tables, procedures, etc
                        outputSchemaToDefault = true
                        includeSequences = true
                        includeSystemSequences = true
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = false
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.serje3.generated.jooq'
                        directory = 'src/generated/jooq'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
}

jar {
    archiveFileName.set('captain-cocker-backend.jar')
    manifest {
        attributes 'Main-Class':'org.serje3.BotBackend.JavaDiscordBotBackendApplication'
    }
}