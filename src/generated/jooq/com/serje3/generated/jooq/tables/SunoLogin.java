/*
 * This file is generated by jOOQ.
 */
package com.serje3.generated.jooq.tables;


import com.serje3.generated.jooq.DefaultSchema;
import com.serje3.generated.jooq.Keys;
import com.serje3.generated.jooq.tables.records.SunoLoginRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SunoLogin extends TableImpl<SunoLoginRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>suno_login</code>
     */
    public static final SunoLogin SUNO_LOGIN = new SunoLogin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SunoLoginRecord> getRecordType() {
        return SunoLoginRecord.class;
    }

    /**
     * The column <code>suno_login.user_id</code>.
     */
    public final TableField<SunoLoginRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>suno_login.cookie</code>.
     */
    public final TableField<SunoLoginRecord, String> COOKIE = createField(DSL.name("cookie"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>suno_login.session_id</code>.
     */
    public final TableField<SunoLoginRecord, String> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.VARCHAR(128), this, "");

    private SunoLogin(Name alias, Table<SunoLoginRecord> aliased) {
        this(alias, aliased, null);
    }

    private SunoLogin(Name alias, Table<SunoLoginRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>suno_login</code> table reference
     */
    public SunoLogin(String alias) {
        this(DSL.name(alias), SUNO_LOGIN);
    }

    /**
     * Create an aliased <code>suno_login</code> table reference
     */
    public SunoLogin(Name alias) {
        this(alias, SUNO_LOGIN);
    }

    /**
     * Create a <code>suno_login</code> table reference
     */
    public SunoLogin() {
        this(DSL.name("suno_login"), null);
    }

    public <O extends Record> SunoLogin(Table<O> child, ForeignKey<O, SunoLoginRecord> key) {
        super(child, key, SUNO_LOGIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<SunoLoginRecord, Long> getIdentity() {
        return (Identity<SunoLoginRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SunoLoginRecord> getPrimaryKey() {
        return Keys.SUNO_LOGIN_PKEY;
    }

    @Override
    public SunoLogin as(String alias) {
        return new SunoLogin(DSL.name(alias), this);
    }

    @Override
    public SunoLogin as(Name alias) {
        return new SunoLogin(alias, this);
    }

    @Override
    public SunoLogin as(Table<?> alias) {
        return new SunoLogin(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SunoLogin rename(String name) {
        return new SunoLogin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SunoLogin rename(Name name) {
        return new SunoLogin(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SunoLogin rename(Table<?> name) {
        return new SunoLogin(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
