/*
 * This file is generated by jOOQ.
 */
package com.serje3.generated.jooq.tables.records;


import com.serje3.generated.jooq.tables.YoutubeSearchQueryCache;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class YoutubeSearchQueryCacheRecord extends UpdatableRecordImpl<YoutubeSearchQueryCacheRecord> implements Record3<Integer, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>youtube_search_query_cache.id</code>.
     */
    public YoutubeSearchQueryCacheRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>youtube_search_query_cache.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>youtube_search_query_cache.query</code>.
     */
    public YoutubeSearchQueryCacheRecord setQuery(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>youtube_search_query_cache.query</code>.
     */
    public String getQuery() {
        return (String) get(1);
    }

    /**
     * Setter for <code>youtube_search_query_cache.executed_at</code>.
     */
    public YoutubeSearchQueryCacheRecord setExecutedAt(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>youtube_search_query_cache.executed_at</code>.
     */
    public LocalDateTime getExecutedAt() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return YoutubeSearchQueryCache.YOUTUBE_SEARCH_QUERY_CACHE.ID;
    }

    @Override
    public Field<String> field2() {
        return YoutubeSearchQueryCache.YOUTUBE_SEARCH_QUERY_CACHE.QUERY;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return YoutubeSearchQueryCache.YOUTUBE_SEARCH_QUERY_CACHE.EXECUTED_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getQuery();
    }

    @Override
    public LocalDateTime component3() {
        return getExecutedAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getQuery();
    }

    @Override
    public LocalDateTime value3() {
        return getExecutedAt();
    }

    @Override
    public YoutubeSearchQueryCacheRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public YoutubeSearchQueryCacheRecord value2(String value) {
        setQuery(value);
        return this;
    }

    @Override
    public YoutubeSearchQueryCacheRecord value3(LocalDateTime value) {
        setExecutedAt(value);
        return this;
    }

    @Override
    public YoutubeSearchQueryCacheRecord values(Integer value1, String value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached YoutubeSearchQueryCacheRecord
     */
    public YoutubeSearchQueryCacheRecord() {
        super(YoutubeSearchQueryCache.YOUTUBE_SEARCH_QUERY_CACHE);
    }

    /**
     * Create a detached, initialised YoutubeSearchQueryCacheRecord
     */
    public YoutubeSearchQueryCacheRecord(Integer id, String query, LocalDateTime executedAt) {
        super(YoutubeSearchQueryCache.YOUTUBE_SEARCH_QUERY_CACHE);

        setId(id);
        setQuery(query);
        setExecutedAt(executedAt);
        resetChangedOnNotNull();
    }
}
