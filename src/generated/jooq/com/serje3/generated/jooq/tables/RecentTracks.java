/*
 * This file is generated by jOOQ.
 */
package com.serje3.generated.jooq.tables;


import com.serje3.generated.jooq.DefaultSchema;
import com.serje3.generated.jooq.Keys;
import com.serje3.generated.jooq.tables.records.RecentTracksRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecentTracks extends TableImpl<RecentTracksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>recent_tracks</code>
     */
    public static final RecentTracks RECENT_TRACKS = new RecentTracks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecentTracksRecord> getRecordType() {
        return RecentTracksRecord.class;
    }

    /**
     * The column <code>recent_tracks.id</code>.
     */
    public final TableField<RecentTracksRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>recent_tracks.guild_id</code>.
     */
    public final TableField<RecentTracksRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>recent_tracks.name</code>.
     */
    public final TableField<RecentTracksRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>recent_tracks.url</code>.
     */
    public final TableField<RecentTracksRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    private RecentTracks(Name alias, Table<RecentTracksRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecentTracks(Name alias, Table<RecentTracksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>recent_tracks</code> table reference
     */
    public RecentTracks(String alias) {
        this(DSL.name(alias), RECENT_TRACKS);
    }

    /**
     * Create an aliased <code>recent_tracks</code> table reference
     */
    public RecentTracks(Name alias) {
        this(alias, RECENT_TRACKS);
    }

    /**
     * Create a <code>recent_tracks</code> table reference
     */
    public RecentTracks() {
        this(DSL.name("recent_tracks"), null);
    }

    public <O extends Record> RecentTracks(Table<O> child, ForeignKey<O, RecentTracksRecord> key) {
        super(child, key, RECENT_TRACKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<RecentTracksRecord, Long> getIdentity() {
        return (Identity<RecentTracksRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RecentTracksRecord> getPrimaryKey() {
        return Keys.RECENT_TRACKS_PKEY;
    }

    @Override
    public List<ForeignKey<RecentTracksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RECENT_TRACKS__RECENT_TRACKS_GUILD_ID_FKEY);
    }

    private transient Guild _guild;

    /**
     * Get the implicit join path to the <code>public.guild</code> table.
     */
    public Guild guild() {
        if (_guild == null)
            _guild = new Guild(this, Keys.RECENT_TRACKS__RECENT_TRACKS_GUILD_ID_FKEY);

        return _guild;
    }

    @Override
    public RecentTracks as(String alias) {
        return new RecentTracks(DSL.name(alias), this);
    }

    @Override
    public RecentTracks as(Name alias) {
        return new RecentTracks(alias, this);
    }

    @Override
    public RecentTracks as(Table<?> alias) {
        return new RecentTracks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecentTracks rename(String name) {
        return new RecentTracks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecentTracks rename(Name name) {
        return new RecentTracks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecentTracks rename(Table<?> name) {
        return new RecentTracks(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
