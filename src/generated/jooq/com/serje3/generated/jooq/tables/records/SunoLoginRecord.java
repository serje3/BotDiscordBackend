/*
 * This file is generated by jOOQ.
 */
package com.serje3.generated.jooq.tables.records;


import com.serje3.generated.jooq.tables.SunoLogin;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SunoLoginRecord extends UpdatableRecordImpl<SunoLoginRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>suno_login.user_id</code>.
     */
    public SunoLoginRecord setUserId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>suno_login.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>suno_login.cookie</code>.
     */
    public SunoLoginRecord setCookie(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>suno_login.cookie</code>.
     */
    public String getCookie() {
        return (String) get(1);
    }

    /**
     * Setter for <code>suno_login.session_id</code>.
     */
    public SunoLoginRecord setSessionId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>suno_login.session_id</code>.
     */
    public String getSessionId() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return SunoLogin.SUNO_LOGIN.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return SunoLogin.SUNO_LOGIN.COOKIE;
    }

    @Override
    public Field<String> field3() {
        return SunoLogin.SUNO_LOGIN.SESSION_ID;
    }

    @Override
    public Long component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getCookie();
    }

    @Override
    public String component3() {
        return getSessionId();
    }

    @Override
    public Long value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getCookie();
    }

    @Override
    public String value3() {
        return getSessionId();
    }

    @Override
    public SunoLoginRecord value1(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public SunoLoginRecord value2(String value) {
        setCookie(value);
        return this;
    }

    @Override
    public SunoLoginRecord value3(String value) {
        setSessionId(value);
        return this;
    }

    @Override
    public SunoLoginRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SunoLoginRecord
     */
    public SunoLoginRecord() {
        super(SunoLogin.SUNO_LOGIN);
    }

    /**
     * Create a detached, initialised SunoLoginRecord
     */
    public SunoLoginRecord(Long userId, String cookie, String sessionId) {
        super(SunoLogin.SUNO_LOGIN);

        setUserId(userId);
        setCookie(cookie);
        setSessionId(sessionId);
        resetChangedOnNotNull();
    }
}
