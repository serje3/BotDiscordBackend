/*
 * This file is generated by jOOQ.
 */
package com.serje3.generated.jooq.tables;


import com.serje3.generated.jooq.DefaultSchema;
import com.serje3.generated.jooq.Keys;
import com.serje3.generated.jooq.tables.records.EventLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventLog extends TableImpl<EventLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>event_log</code>
     */
    public static final EventLog EVENT_LOG = new EventLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventLogRecord> getRecordType() {
        return EventLogRecord.class;
    }

    /**
     * The column <code>event_log.id</code>.
     */
    public final TableField<EventLogRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>event_log.type</code>.
     */
    public final TableField<EventLogRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>event_log.name</code>.
     */
    public final TableField<EventLogRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>event_log.description</code>.
     */
    public final TableField<EventLogRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>event_log.guild_id</code>.
     */
    public final TableField<EventLogRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>event_log.sender_id</code>.
     */
    public final TableField<EventLogRecord, Long> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>event_log.emitted_at</code>.
     */
    public final TableField<EventLogRecord, LocalDateTime> EMITTED_AT = createField(DSL.name("emitted_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private EventLog(Name alias, Table<EventLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventLog(Name alias, Table<EventLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>event_log</code> table reference
     */
    public EventLog(String alias) {
        this(DSL.name(alias), EVENT_LOG);
    }

    /**
     * Create an aliased <code>event_log</code> table reference
     */
    public EventLog(Name alias) {
        this(alias, EVENT_LOG);
    }

    /**
     * Create a <code>event_log</code> table reference
     */
    public EventLog() {
        this(DSL.name("event_log"), null);
    }

    public <O extends Record> EventLog(Table<O> child, ForeignKey<O, EventLogRecord> key) {
        super(child, key, EVENT_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<EventLogRecord, Integer> getIdentity() {
        return (Identity<EventLogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventLogRecord> getPrimaryKey() {
        return Keys.EVENT_LOG_PKEY;
    }

    @Override
    public List<ForeignKey<EventLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENT_LOG__EVENT_LOG_GUILD_ID_FKEY);
    }

    private transient Guild _guild;

    /**
     * Get the implicit join path to the <code>public.guild</code> table.
     */
    public Guild guild() {
        if (_guild == null)
            _guild = new Guild(this, Keys.EVENT_LOG__EVENT_LOG_GUILD_ID_FKEY);

        return _guild;
    }

    @Override
    public EventLog as(String alias) {
        return new EventLog(DSL.name(alias), this);
    }

    @Override
    public EventLog as(Name alias) {
        return new EventLog(alias, this);
    }

    @Override
    public EventLog as(Table<?> alias) {
        return new EventLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventLog rename(String name) {
        return new EventLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventLog rename(Name name) {
        return new EventLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventLog rename(Table<?> name) {
        return new EventLog(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, Long, Long, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
