/*
 * This file is generated by jOOQ.
 */
package com.serje3.generated.jooq.tables;


import com.serje3.generated.jooq.DefaultSchema;
import com.serje3.generated.jooq.Keys;
import com.serje3.generated.jooq.tables.records.GuildRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Guild extends TableImpl<GuildRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>guild</code>
     */
    public static final Guild GUILD = new Guild();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GuildRecord> getRecordType() {
        return GuildRecord.class;
    }

    /**
     * The column <code>guild.id</code>.
     */
    public final TableField<GuildRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>guild.owner_id</code>.
     */
    public final TableField<GuildRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>guild.guild_id</code>.
     */
    public final TableField<GuildRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>guild.name</code>.
     */
    public final TableField<GuildRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>guild.icon_url</code>.
     */
    public final TableField<GuildRecord, String> ICON_URL = createField(DSL.name("icon_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>guild.join_date</code>.
     */
    public final TableField<GuildRecord, LocalDateTime> JOIN_DATE = createField(DSL.name("join_date"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Guild(Name alias, Table<GuildRecord> aliased) {
        this(alias, aliased, null);
    }

    private Guild(Name alias, Table<GuildRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>guild</code> table reference
     */
    public Guild(String alias) {
        this(DSL.name(alias), GUILD);
    }

    /**
     * Create an aliased <code>guild</code> table reference
     */
    public Guild(Name alias) {
        this(alias, GUILD);
    }

    /**
     * Create a <code>guild</code> table reference
     */
    public Guild() {
        this(DSL.name("guild"), null);
    }

    public <O extends Record> Guild(Table<O> child, ForeignKey<O, GuildRecord> key) {
        super(child, key, GUILD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<GuildRecord, Integer> getIdentity() {
        return (Identity<GuildRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GuildRecord> getPrimaryKey() {
        return Keys.GUILD_PKEY;
    }

    @Override
    public List<UniqueKey<GuildRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.GUILD_GUILD_ID_KEY);
    }

    @Override
    public Guild as(String alias) {
        return new Guild(DSL.name(alias), this);
    }

    @Override
    public Guild as(Name alias) {
        return new Guild(alias, this);
    }

    @Override
    public Guild as(Table<?> alias) {
        return new Guild(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Guild rename(String name) {
        return new Guild(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Guild rename(Name name) {
        return new Guild(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Guild rename(Table<?> name) {
        return new Guild(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Long, Long, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
